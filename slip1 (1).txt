Q1
#include<stdio.h>
#include<stdlib.h>
#include<conio.h>
typedef struct node
{
int info;
struct node*left,*right;
} NODE;
NODE *createbst(NODE *root,int item)
{
if(root==NULL)
{
root=(NODE *)malloc(sizeof(NODE));
root->left=root->right=NULL;
root->info=item;
return root;
}
else
{
if(item<root->info)
root->left=createbst(root->left, item);
else
{
if(item>root->info)
root->right=createbst(root->right,item);
else
printf("Duplicate element is not allowed");
}
return root;
}
}
void inorder(NODE *root)
{
if(root!=NULL)
{
inorder(root->left);
printf("%d\t",root->info);
inorder(root->right);
}
}
int main()
{
int i,n,choice,item,key;
NODE *temp,*root=NULL;
while(1)
{
printf("\nBINARY SEARCH TREE");
printf("\n1.Create bst");
printf("\n2.Inorder");
printf("\n3.Exit");
printf("\nEnter your choice");
scanf("%d",&choice);
switch (choice)
{
case 1:
printf("Enter how many nodes you want to create");
scanf("%d",&n);
for(i=0;i<n;i++)
{
printf("\nEnter the node info");
scanf("%d",&item);
root=createbst(root,item);
}
break;
case 2:
printf("\nInorder=");
inorder(root);
break;
case 3:
exit(0);
default:
printf("Wrong choice entered....");
}
}
}




Q2


#include<stdio.h>
int cost[8][8]={
{0,999,999,999,999,999,999,999},
{30,0,999,999,999,999,999,999},
{100,80,0,999,999,999,999,999},
{999,999,120,0,999,999,999,999},
{999,999,999,150,0,25,999,999},
{999,999,999,100,999,0,90,140},
{999,999,999,999,999,999,0,100},
{170,999,999,999,999,999,999,0}
};
void dijkstra(int v,int n)
{
int i,j,u,w,count,min;
int dist[10],visited[10]={0};
visited[v]=1;
for(i=0;i<n;i++)
dist[i]=cost[v][i];
count=2;
while(count<n)
{
min=999;
for(i=0;i<n;i++)
if(visited[i]==0 && dist[i]<min)
{
min=dist[i];
u=i;
}
visited[u]=1;
for(w=0;w<n;w++)
if(dist[u]+cost[u][w]<dist[w])
dist[w]=dist[u]+cost[u][w];
count++;
}
printf("\n shortest distance from vertex %d are:\n",v);
for(i=0;i<n;i++)
printf("%d\t",dist[i]);
}
void main()
{
dijkstra(4,8);
}