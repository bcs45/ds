Q1


#include<stdio.h>
#include<stdlib.h>
#include<conio.h>
typedef struct node
{
int info;
struct node*left,*right;
} NODE;
NODE *createbst(NODE *root,int item)
{
if(root==NULL)
{
root=(NODE *)malloc(sizeof(NODE));
root->left=root->right=NULL;
root->info=item;
return root;
}
else
{
if(item<root->info)
root->left=createbst(root->left, item);
else
{
if(item>root->info)
root->right=createbst(root->right,item);
else
printf("Duplicate element is not allowed");
}
return root;
}
}
void inorder(NODE *root)
{
if(root!=NULL)
{
inorder(root->left);
printf("%d\t",root->info);
inorder(root->right);
}
}
NODE* delete_BST (NODE *root, int n)
{
NODE *temp, *succ ;
if(root== NULL)
{
printf("\n No. not found");
return (root);
}
if (n<root->info)
root->left-delete_BST(root->left,n);
else
if (n>root->info)
root->right=delete_BST(root->right,n);
else
{
if (root->left!= NULL && root->right!=NULL)
{
succ=root->right;
while (succ->left)
succ= succ->left;
root->info=succ->info;
root->right=delete_BST(root->right, succ->info);
}
else
{
temp-root;
if(root->left != NULL)
root-root->left;
else if (root->right!= NULL)
root=root->right;
else
root=NULL;
free (temp);
}
}
return (root);
}
int main()
{
int i,n,choice,item,key;
NODE *temp,*root=NULL;
while(1)
{
printf("\nBINARY SEARCH TREE");
printf("\n1.Create bst");
printf("\n2.Deleting node from bst");
printf("\n3.Exit");
printf("\nEnter your choice");
scanf("%d",&choice);
switch (choice)
{
case 1:
printf("Enter how many nodes you want to create");
scanf("%d",&n);
for(i=0;i<n;i++)
{
printf("\nENter the node info");
scanf("%d",&item);
root=createbst(root,item);
}
break;
case 2:
printf("\nEnter element to be deleted from BST");
scanf("%d",&n);
temp=delete_BST(root,n);
printf("\nResult after deletion is :\n");
inorder(root);
break;
case 3:
exit(0);
default:
printf("Wrong choice entered....");
}
}
}


Q2


#include<stdio.h>
void main()
{
int a[10][10],n,j,i,out=0,in=0;
printf("enter the how many vertex");
scanf("%d",&n);
for(i=0;i<n;i++)
{
for(j=0;j<n;j++)
{
a[i][j]=0;
if(i!=j)
{
printf("is there edge bet %d and %d",i+1,j+1);
scanf("%d",&a[i][j]);
}
}
}
printf("Vertex Indegree Outdegree\n");
for(i=0;i<n;i++)
{
in=out=0;
for(j=0;j<n;j++)
{
in=in+a[j][i]; // count for indegree at vertex i
out=out+a[i][j]; // count for outdegree from vertex i
}
printf(" v%3d%14d%10d",i+1,in,out);
printf("\n");
}
}